- name: Create disk for Worker VM
  command: "qemu-img create -f qcow2 /var/lib/libvirt/images/{{ item }}.qcow2 {{ worker_node_disksize }}"
  delegate_to: "{{ hostvars[item]['kvm_host'] }}"
  with_items: "{{ groups['workers'] }}"
- shell:
   cmd: virt-install --name {{ item }} --memory {{ worker_node_memory }} --vcpus {{ worker_node_cpu }} --cpu "{{ cpu_model }}" --disk path=/var/lib/libvirt/images/{{ item }}.qcow2,format=qcow2,bus=virtio,io=threads --hvm --network bridge=br0,mac={{ hostvars[item]['ethernet'] }},model=virtio --install kernel={{ coreos_kernel }},initrd={{ coreos_initrd }},kernel_args_overwrite=yes,kernel_args="{{coreos_kernel_args}}/worker.ign" --os-type=linux --os-variant {{ os_variant }} --keymap={{ os_keymap }} --noautoconsole --wait=-1 --noreboot
  delegate_to: "{{ hostvars[item]['kvm_host'] }}"
  loop: "{{ groups['workers'] }}"
  register: create_worker_instances
  ignore_errors: yes
  async: 180
  poll: 0
- async_status:
    jid: "{{ item.ansible_job_id }}"
  delegate_to: "{{ hostvars[item.item]['kvm_host'] }}"
  register: jobs
  until: jobs.finished
  delay: 5
  retries: 36
  with_items: "{{ create_worker_instances.results }}"
- name: Start Worker VM's
  virt:
    name: "{{ item }}"
    state: running
    autostart: yes
  delegate_to: "{{ hostvars[item]['kvm_host'] }}"
  loop: "{{ groups['workers'] }}"
